name: Docker Image

on:
  push:
    tags:
      - "*"
    paths-ignore:
      - ".idea/**"
      - ".vscode/**"
      - "**.md"
    branches:
      - master

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: PyTest
        uses: fylein/python-pytest-github-action@v2
        with:
          args: |
            pip3 --disable-pip-version-check --no-cache-dir install --quiet mock assertpy;
            pytest

      - name: Fetch tags for GitVersion
        run: git fetch --tags

      - name: Fetch master for GitVersion
        if: github.ref != 'refs/heads/master'
        run: if [[ $(git show-ref refs/heads/master) = '' ]]; then git branch --create-reflog master origin/master; fi

      - name: GitVersion
        id: gitversion
        uses: roryprimrose/rungitversion@v1.0.0

      - name: Image Tags 
        id: tags
        run: |
          DOCKER_IMAGE=frundh/pdns-nipio
          TAGS="${DOCKER_IMAGE}:${{ steps.gitversion.outputs.SemVer }}"
          echo ::set-output name=dockerhub::${TAGS}
          TAGS="ghcr.io/${TAGS},${TAGS}"
          if [[ "${{ github.ref }}" = "refs/heads/master" ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        if: env.CI != 'true'
        uses: docker/login-action@v1
        with:
          username: ${{ github.repository_owner }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Login to GitHub container registry
        if: env.CI != 'true'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and Push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: ./
          file: ./Dockerfile
          push: ${{ env.CI != 'true' }}
          tags: ${{ steps.tags.outputs.tags }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Create Release
        id: create_release
        if: env.CI == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ steps.gitversion.outputs.SemVer }}"
          body: |
            ```
            docker pull ${{ steps.tags.outputs.dockerhub }}
            ```
          draft: true
          prerelease: ${{ github.event_name == 'pull_request' }}